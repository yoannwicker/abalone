name: Build and Deploy

on:
  push:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build without Tests
        run: ./gradlew buildWithoutTests

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test

  build-docker-image:
    runs-on: ubuntu-latest
    needs: [ build, test ]
    if: github.ref == 'refs/heads/branch-name'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build without Tests
        run: ./gradlew buildWithoutTests

      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

      - name: Remove existing backend image (if exists)
        run: |
          docker image rm ghcr.io/${{ secrets.GHCR_USERNAME }}/abalone-backend:latest || true

      - name: Build and push backend image
        run: |
          docker build -t ghcr.io/${{ secrets.GHCR_USERNAME }}/abalone-backend:latest -f ./backend/application/Dockerfile ./backend/application
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/abalone-backend:latest

      - name: Remove existing frontend image (if exists)
        run: |
          docker image rm ghcr.io/${{ secrets.GHCR_USERNAME }}/abalone-ui:latest || true

      - name: Build and push frontend image
        run: |
          docker build -t ghcr.io/${{ secrets.GHCR_USERNAME }}/abalone-ui:latest -f ./frontend/Dockerfile ./frontend
          docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/abalone-ui:latest

  run-docker-image:
    needs: build-docker-image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to GitHub Container Registry on Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DIGITALOCEAN_IP }}
          username: ${{ secrets.DIGITALOCEAN_USER }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          script: |
            echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

      - name: Deploy backend and frontend containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DIGITALOCEAN_IP }}
          username: ${{ secrets.DIGITALOCEAN_USER }}
          key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
          script: |
            # Create Docker network
            docker network create abalone-network || true  # Use `|| true` to ignore error if network already exists
            
            # Stop and remove any existing containers
            docker stop abalone-backend || true && docker rm abalone-backend || true
            docker stop abalone-ui || true && docker rm abalone-ui || true
            
            # Remove existing Docker images
            docker rmi ghcr.io/${{ secrets.GHCR_USERNAME }}/abalone-backend:latest || true
            docker rmi ghcr.io/${{ secrets.GHCR_USERNAME }}/abalone-ui:latest || true
            
            # Run backend container
            docker run -d --name abalone-backend -p 8080:8080 --network abalone-network ghcr.io/${{ secrets.GHCR_USERNAME }}/abalone-backend:latest
            
            # Run frontend container
            docker run -d --name abalone-ui -p 4200:80 --network abalone-network ghcr.io/${{ secrets.GHCR_USERNAME }}/abalone-ui:latest

